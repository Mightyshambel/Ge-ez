"""
Amharic Error Messages for Ge-ez Programming Language
Provides comprehensive error messages in Amharic with context and suggestions
"""

from typing import Dict, Any, Optional


class AmharicErrorMessages:
    """Centralized Amharic error message system"""
    
    # Lexer Error Messages
    LEXER_ERRORS = {
        'unknown_character': "·ã´·àç·â≥·ãà·âÄ ·âÅ·àù·çä '{char}' ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'unexpected_eof': "·ã´·àç·â∞·å†·â†·âÄ ·ã®·çã·ã≠·àç ·àò·å®·à®·àª",
        'invalid_number': "·ã®·â∞·à≥·à≥·â∞ ·âÅ·å•·à≠ '{number}'",
        'unclosed_string': "·ã´·àç·â∞·ãò·åã ·åà·àã·å≠ '{string}'",
        'unclosed_comment': "·ã´·àç·â∞·ãò·åã ·ä†·àµ·â∞·ã´·ã®·âµ",
    }
    
    # Parser Error Messages
    PARSER_ERRORS = {
        'unexpected_token': "·ã´·àç·â∞·å†·â†·âÄ ·â∂·ä®·äï '{token}' ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'expected_token': "{expected} ·ã≠·å†·â†·âÖ ·äê·â†·à≠ ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'expected_identifier': "·ã®·â∞·àà·ãã·ãã·å≠ ·àµ·àù ·ã≠·å†·â†·âÖ ·äê·â†·à≠ ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'expected_expression': "·åà·àà·åª ·ã≠·å†·â†·âÖ ·äê·â†·à≠ ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'expected_statement': "·àò·åç·àà·å´ ·ã≠·å†·â†·âÖ ·äê·â†·à≠ ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'unclosed_brace': "·ã´·àç·â∞·ãò·åã ·âÖ·äï·çç '{' ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'unclosed_paren': "·ã´·àç·â∞·ãò·åã ·âÖ·äï·çç '(' ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'unclosed_bracket': "·ã´·àç·â∞·ãò·åã ·âÖ·äï·çç '[' ·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}",
        'missing_assignment': "·ã®·àò·àò·ã∞·â¢·ã´ ·àù·àç·ä≠·âµ '=' ·ã≠·å†·â†·âÖ ·äê·â†·à≠",
        'missing_semicolon': "·ã®·àò·àµ·àò·à≠ ·àò·å®·à®·àª ';' ·ã≠·å†·â†·âÖ ·äê·â†·à≠",
    }
    
    # Interpreter Error Messages
    INTERPRETER_ERRORS = {
        'undefined_variable': "·ã´·àç·â∞·åà·àà·å∏ ·â∞·àà·ãã·ãã·å≠: '{variable}'",
        'undefined_function': "·ã´·àç·â∞·åà·àà·å∏ ·â∞·åç·â£·à≠: '{function}'",
        'division_by_zero': "·â†·ãú·àÆ ·àò·ä®·çã·çà·àç ·ä†·ã≠·âª·àç·àù",
        'type_error': "·ã®·â∞·à≥·à≥·â∞ ·ãì·ã≠·äê·âµ: {message}",
        'index_error': "·ã®·ãù·à≠·ãù·à≠ ·àò·à®·åÉ {index} ·ä®·ãà·à∞·äï ·ãç·å≠ (·ãù·à≠·ãù·à© {length} ·ä†·ä´·àã·âµ ·ä†·àâ·âµ)",
        'value_error': "·ã®·â∞·à≥·à≥·â∞ ·ä•·à¥·âµ: {message}",
        'runtime_error': "·ã®·àò·àµ·à´·âµ ·àµ·àÖ·â∞·âµ: {message}",
        'file_not_found': "·çã·ã≠·àç ·ä†·àç·â∞·åà·äò·àù: '{filename}'",
        'permission_denied': "·çà·âÉ·ãµ ·â∞·à∞·å•·â∑·àç: '{filename}'",
        'file_exists': "·çã·ã≠·àç ·ä†·àµ·âÄ·ãµ·àû ·ä†·àà: '{filename}'",
        'directory_not_found': "·ã≤·à¨·ä≠·â∂·à™ ·ä†·àç·â∞·åà·äò·àù: '{directory}'",
        'invalid_operation': "·ã®·àõ·ã≠·âª·àç ·àµ·à´: {operation}",
        'argument_count_mismatch': "·â∞·åç·â£·à≠ '{function}' {expected} ·äê·åã·à™ ·ä•·à¥·â∂·âΩ ·ã≠·å†·â†·âÉ·àç·ç£ {actual} ·â∞·âÄ·â†·àà",
        'invalid_iteration': "·â† {type} ·àã·ã≠ ·àò·ãµ·åà·àù ·ä†·ã≠·âª·àç·àù",
        'unknown_operator': "·ã´·àç·â≥·ãà·âÄ ·ä¶·çî·à¨·â∞·à≠: '{operator}'",
        'unknown_node_type': "·ã´·àç·â≥·ãà·âÄ ·ã®·äñ·ãµ ·ãì·ã≠·äê·âµ: {type}",
        'file_operation_failed': "·ã®·çã·ã≠·àç ·àµ·à´ ·ä†·àç·â∞·à≥·ä´·àù: {message}",
        'string_method_error': "·ã®·åà·àã·å≠ ·ãò·ã¥ ·àµ·àÖ·â∞·âµ: {message}",
        'builtin_function_error': "·ã®·â∞·àà·ãã·ãã·å≠ ·â∞·åç·â£·à≠ ·àµ·àÖ·â∞·âµ: {message}",
        'type_error_dict_access': "·äï·â•·â• ·ä†·ã≠·äê·âµ ·ä•·äï·ã∞ ·äï·â•·â• ·àò·å†·âÄ·àù ·ä†·àà·â†·âµ·ç£ {type} ·ä†·ã≠·ã∞·àà·àù",
        'key_not_found': "·âÅ·àç·çç '{key}' ·â†·äï·â•·â• ·ãç·àµ·å• ·ä†·àç·â∞·åà·äò·àù",
        'type_error_dict_operation': "·äï·â•·â• ·ä†·ã≠·äê·âµ ·ä•·äï·ã∞ ·äï·â•·â• ·àò·å†·âÄ·àù ·ä†·àà·â†·âµ·ç£ {type} ·ä†·ã≠·ã∞·àà·àù",
        'add_requires_value': "·å®·àù·à≠_·ãà·ã∞ ·ä≠·ãã·äî ·ä•·à¥·âµ ·ã´·àµ·çà·àç·åà·ãã·àç",
        'unknown_dict_operation': "·ã´·àç·â≥·ãà·âÄ ·ã®·äï·â•·â• ·ä≠·ãã·äî: {operation}",
        'undefined_class': "·ã´·àç·â∞·åà·àà·å∏ ·ä≠·çç·àç: '{class_name}'",
        'type_error_property_access': "·äï·â•·â• ·ä†·ã≠·äê·âµ ·ä•·äï·ã∞ ·äï·â•·â• ·àò·å†·âÄ·àù ·ä†·àà·â†·âµ·ç£ {type} ·ä†·ã≠·ã∞·àà·àù",
        'property_not_found': "·â£·àÖ·à™ '{property}' ·ä†·àç·â∞·åà·äò·àù",
        'type_error_method_call': "·äï·â•·â• ·ä†·ã≠·äê·âµ ·ä•·äï·ã∞ ·äï·â•·â• ·àò·å†·âÄ·àù ·ä†·àà·â†·âµ·ç£ {type} ·ä†·ã≠·ã∞·àà·àù",
        'invalid_object': "·ã®·àõ·ã≠·âª·àç ·äê·åà·à≠: {object}",
        'method_not_found': "·ãò·ã¥ '{method}' ·â†·ä≠·çç·àç '{class_name}' ·ãç·àµ·å• ·ä†·àç·â∞·åà·äò·àù",
    }
    
    # Context-aware suggestions
    SUGGESTIONS = {
        'undefined_variable': "·â∞·àà·ãã·ãã·å≠ '{variable}' ·ä®·àò·å†·âÄ·àù ·â†·çä·âµ ·â† '·ä†·àµ·â∞·ãã·ãç·âÖ' ·ä†·àµ·â∞·ãã·ãç·âÄ·ãç",
        'undefined_function': "·â∞·åç·â£·à≠ '{function}' ·ä®·àò·å†·âÄ·àù ·â†·çä·âµ ·â† '·â∞·åç·â£·à≠' ·ä†·àµ·â∞·ãã·ãç·âÄ·ãç",
        'missing_assignment': "·â∞·àà·ãã·ãã·å≠ ·ä®·àò·àò·ã∞·â• ·â†·çä·âµ '=' ·àù·àç·ä≠·âµ ·ã´·àµ·åà·â°",
        'unclosed_brace': "·ã®·â∞·ä®·çà·â∞ '{' ·âÖ·äï·çç ·â† '}' ·ã≠·ãù·åâ",
        'unclosed_paren': "·ã®·â∞·ä®·çà·â∞ '(' ·âÖ·äï·çç ·â† ')' ·ã≠·ãù·åâ",
        'unclosed_bracket': "·ã®·â∞·ä®·çà·â∞ '[' ·âÖ·äï·çç ·â† ']' ·ã≠·ãù·åâ",
        'division_by_zero': "·â†·ãú·àÆ ·ä®·àò·ä®·çã·çà·àç ·â†·çä·âµ ·âÅ·å•·à© ·ãú·àÆ ·ä•·äï·ã≥·àç·àÜ·äê ·ã´·à®·åã·åç·å°",
        'index_out_of_range': "·ã®·ãù·à≠·ãù·à≠ ·àò·à®·åÉ ·ä®·ãù·à≠·ãù·à© ·à≠·ãù·àò·âµ ·ã´·äê·à∞ ·àò·àÜ·äë·äï ·ã´·à®·åã·åç·å°",
    }
    
    @staticmethod
    def get_lexer_error(error_type: str, **kwargs) -> str:
        """Get lexer error message in Amharic"""
        template = AmharicErrorMessages.LEXER_ERRORS.get(error_type, "·ã´·àç·â≥·ãà·âÄ ·àµ·àÖ·â∞·âµ: {error_type}")
        return template.format(**kwargs)
    
    @staticmethod
    def get_parser_error(error_type: str, **kwargs) -> str:
        """Get parser error message in Amharic"""
        template = AmharicErrorMessages.PARSER_ERRORS.get(error_type, "·ã´·àç·â≥·ãà·âÄ ·àµ·àÖ·â∞·âµ: {error_type}")
        return template.format(**kwargs)
    
    @staticmethod
    def get_interpreter_error(error_type: str, **kwargs) -> str:
        """Get interpreter error message in Amharic"""
        template = AmharicErrorMessages.INTERPRETER_ERRORS.get(error_type, "·ã´·àç·â≥·ãà·âÄ ·àµ·àÖ·â∞·âµ: {error_type}")
        return template.format(**kwargs)
    
    @staticmethod
    def get_suggestion(error_type: str, **kwargs) -> str:
        """Get helpful suggestion for error"""
        template = AmharicErrorMessages.SUGGESTIONS.get(error_type, "")
        return template.format(**kwargs) if template else ""
    
    @staticmethod
    def format_error_with_suggestion(error_type: str, error_message: str, **kwargs) -> str:
        """Format error message with suggestion"""
        suggestion = AmharicErrorMessages.get_suggestion(error_type, **kwargs)
        if suggestion:
            return f"·àµ·àÖ·â∞·âµ: {error_message}\nüí° ·àù·ä≠·à≠: {suggestion}"
        return f"·àµ·àÖ·â∞·âµ: {error_message}"
    
    @staticmethod
    def get_context_info(line: int, column: int, filename: Optional[str] = None) -> str:
        """Get context information for error"""
        context = f"·â†·àò·àµ·àò·à≠ {line}·ç£ ·ä†·àù·ãµ {column}"
        if filename:
            context = f"·â†·çã·ã≠·àç '{filename}' {context}"
        return context
